import{_ as e,c as r,o as a,a as t}from"./app.43496e99.js";const E=JSON.parse('{"title":"拓展 Editor","description":"","frontmatter":{},"headers":[{"level":2,"title":"本章内容","slug":"本章内容","link":"#本章内容","children":[]},{"level":2,"title":"开发者工具","slug":"开发者工具","link":"#开发者工具","children":[]}],"relativePath":"extend/intro.md","lastUpdated":1660026515000}'),i={name:"extend/intro.md"},n=t('<h1 id="拓展-editor" tabindex="-1">拓展 Editor <a class="header-anchor" href="#拓展-editor" aria-hidden="true">#</a></h1><p>Unreal 的源代码是完全开放的，理论上我们可以对 Unreal Editor 做出任意更改。但作为拥有 20 余年历史的当今最强大的商业游戏引擎，Unreal 的底层代码复杂度极高，核心模块间存在大量耦合，并且仍在飞速发展。从开发难度和项目工程性的角度考虑，直接修改 Unreal Editor 的源代码是极不明智的。</p><p>但好在 Unreal 开发团队一直在致力于解决历史遗留问题和过度耦合问题，不断优化 API 的易用性。截止到 Unreal 5.0 正式版，Unreal Editor 的应用层部分几乎都使用单例模式进行全局管理，并且预留了大量拓展位和钩子，使得我们可以在不破坏 Unreal 原有代码的前提下方便地对 Unreal Editor 进行拓展。</p><h2 id="本章内容" tabindex="-1">本章内容 <a class="header-anchor" href="#本章内容" aria-hidden="true">#</a></h2><p>本章将介绍以下内容：</p><ul><li>Unreal Editor 中的 Commands 系统。</li><li>在 Unreal Editor 中添加自定义菜单。</li><li>在 Unreal Editor 中添加自定义窗口。</li></ul><h2 id="开发者工具" tabindex="-1">开发者工具 <a class="header-anchor" href="#开发者工具" aria-hidden="true">#</a></h2><p>Editor Preference 中提供了开发者选项 <code>Display UI Extension Points</code>，用于查看 Unreal Editor 中的可拓展点位。建议读者在开始本章前尝试此开发者选项，以便对 Unreal Editor 的可拓展性有初步认识。</p>',8),d=[n];function l(o,s,c,_,h,p){return a(),r("div",null,d)}const u=e(i,[["render",l]]);export{E as __pageData,u as default};
