import{_ as s,c as a,o as l,a as n}from"./app.43496e99.js";const A=JSON.parse('{"title":"Slate 控件","description":"","frontmatter":{},"headers":[{"level":2,"title":"关于 Slate 控件","slug":"关于-slate-控件","link":"#关于-slate-控件","children":[]},{"level":2,"title":"控件属性","slug":"控件属性","link":"#控件属性","children":[]},{"level":2,"title":"控件基本类型","slug":"控件基本类型","link":"#控件基本类型","children":[]},{"level":2,"title":"声明控件类型","slug":"声明控件类型","link":"#声明控件类型","children":[]},{"level":2,"title":"实现控件类型","slug":"实现控件类型","link":"#实现控件类型","children":[]},{"level":2,"title":"关于自定义","slug":"关于自定义","link":"#关于自定义","children":[]},{"level":2,"title":"基本控件","slug":"基本控件","link":"#基本控件","children":[{"level":3,"title":"SDockTab","slug":"sdocktab","link":"#sdocktab","children":[]}]}],"relativePath":"slate/widget.md","lastUpdated":1660026515000}'),e={name:"slate/widget.md"},o=n(`<h1 id="slate-控件" tabindex="-1">Slate 控件 <a class="header-anchor" href="#slate-控件" aria-hidden="true">#</a></h1><h2 id="关于-slate-控件" tabindex="-1">关于 Slate 控件 <a class="header-anchor" href="#关于-slate-控件" aria-hidden="true">#</a></h2><p>Slate 控件是所有基于 Slate UI 构建的 GUI 的基本单位。有 GUI 开发经验的读者应该都能理解控件的概念，在这里不过多赘述。</p><p>在 Unreal 中，所有 Slate 控件的基类是 <code>SWidget</code>，其所有派生类命名均带有 <code>S</code> 前缀。</p><h2 id="控件属性" tabindex="-1">控件属性 <a class="header-anchor" href="#控件属性" aria-hidden="true">#</a></h2><p>Slate 控件属性主要分为 4 类，分别是：</p><ul><li>Attribute：一般属性，支持绑定属性值或绑定返回属性值的函数。</li><li>Argument：一般属性，仅支持绑定属性值。</li><li>Event：事件，支持绑定 Delegate 回调函数。</li><li>Slot：子控件槽，支持绑定 Slate 控件。</li></ul><p>其中 Slot 属性有 Default Slot 和 Named Slot 两种，二者在声明和绑定语法上有差异，但功能和实现完全一致。控件属性的绑定需要用到 Slate 表达式，相关语法将在下一章节中详细介绍。</p><h2 id="控件基本类型" tabindex="-1">控件基本类型 <a class="header-anchor" href="#控件基本类型" aria-hidden="true">#</a></h2><p>Slate 核心库依据可容纳子控件的数量设计了三种控件基本类型：</p><ul><li><code>SLeafWidget</code> : 派生类无 Slot 属性，不包含子控件。多用于基本控件。</li><li><code>SCompoundWidget</code> : 派生类有 Slot 属性，可包含数量固定的子控件。多用于功能性控件。</li><li><code>SPanel</code> : 派生类实现 <code>Slot()</code> 方法，可包含多个并列结构的子控件。多用于布局类控件。</li></ul><p>在插件开发过程中，一般选择继承 <code>SCompoundWidget</code> 设计自定义控件。</p><h2 id="声明控件类型" tabindex="-1">声明控件类型 <a class="header-anchor" href="#声明控件类型" aria-hidden="true">#</a></h2><p>Slate UI 框架提供了一组基于声明式语法的宏用于简化 Slate 控件类型的声明。下面是一个派生自 <code>SCompoundWidget</code> 的自定义 Slate 控件类型声明示例：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SMyWidget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SCompoundWidget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">SLATE_BEGIN_ARGS</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SMyWidget</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">_AttrName</span><span style="color:#89DDFF;">(true)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">_ArgName</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SLATE_ATTRIBUTE</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">AttrName</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SLATE_ARGUMENT</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ArgName</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SLATE_EVENT</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FOnClicked</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> OnClicked</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SLATE_DEFAULT_SLOT</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FArguments</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> DefaultSlotName</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SLATE_NAMED_SLOT</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FArguments</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> SlotName</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">SLATE_END_ARGS</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Construct</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FArguments</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">InArgs</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>在本实例中，使用了以下宏：</p><ul><li><code>SLATE_BEGIN_ARGS() {}</code>：开始 Slate 控件类型声明。</li><li><code>SLATE_ATTRIBUTE()</code>：声明 Attribute 属性。</li><li><code>SLATE_ARGUMENT()</code>：声明 Argument 属性。</li><li><code>SLATE_EVENT()</code>：声明 Event 属性。</li><li><code>SLATE_DEFAULT_SLOT()</code>：声明 Default Slot 属性。</li><li><code>SLATE_NAMED_SLOT()</code>：声明 Named Slot 属性。</li><li><code>SLATE_END_ARGS()</code>：结束 Slate 控件类型声明。</li></ul><p>在开始 Slate 控件类型声明时，可以使用类似构造函数的语法为控件属性指派初值。控件属性对应的实际变量名均带有 <code>_</code> 前缀。</p><h2 id="实现控件类型" tabindex="-1">实现控件类型 <a class="header-anchor" href="#实现控件类型" aria-hidden="true">#</a></h2><p>在完成控件类型声明后，至少需要实现 <code>Construct()</code> 方法来描述该控件的内容。<code>Construct()</code> 方法在控件实例化时被调用，该方法接收一个名为 <code>InArgs</code> 的，带有全部控件属性的 <code>FArguments</code> 参数。可以使用如下语法实现 <code>Construct()</code> 方法：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SMyWidget</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Construct</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FArguments</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">InArgs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  ChildSlot</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">SNew</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SButton</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    .</span><span style="color:#82AAFF;">Text</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">FText</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">FromString</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">TEXT</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyWidget</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)))</span></span>
<span class="line"><span style="color:#A6ACCD;">    .</span><span style="color:#82AAFF;">OnClicked</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">InArgs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_OnClicked</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在 <code>ChildSlot [...];</code> 中使用 Slate 表达式定义该控件类型的内容。Slate 表达式语法将在下一章节详细介绍。</p><h2 id="关于自定义" tabindex="-1">关于自定义 <a class="header-anchor" href="#关于自定义" aria-hidden="true">#</a></h2><p>Unreal 为我们提供了构建 Unreal Editor 所使用的全部控件，一般来说可以满足绝大多数工具的开发需求。从工程性的角度考虑，应避免刻意的自定义控件，多复用 Unreal Editor 提供的控件。仅在以下两种情况下建议使用自定义控件：</p><ul><li>将频繁使用的基本控件组合进行封装。</li><li>应用场景复杂，不能从 Unreal Editor 中找到合适的控件。</li></ul><p>至于完全自定义控件，涉及到重写 <code>SWidget</code> 渲染相关函数，本文档暂不涉及（可能以后会添加）。</p><hr><h1 id="分割线-wip" tabindex="-1">分割线 WIP... <a class="header-anchor" href="#分割线-wip" aria-hidden="true">#</a></h1><hr><h2 id="基本控件" tabindex="-1">基本控件 <a class="header-anchor" href="#基本控件" aria-hidden="true">#</a></h2><h3 id="sdocktab" tabindex="-1"><code>SDockTab</code> <a class="header-anchor" href="#sdocktab" aria-hidden="true">#</a></h3><p>在拓展窗口章节中，我们提到了使用 <code>FTabManager</code> 注册自定义窗口，其中 <code>FOnSpawnTab</code> 代理需要返回的控件就是该控件。</p><p><code>SDockTab</code> 控件描述了一个 Tab 的标签信息和内容，是构建 Unreal 内独立窗口应用的入口。</p>`,33),p=[o];function t(c,r,F,i,d,y){return l(),a("div",null,p)}const h=s(e,[["render",t]]);export{A as __pageData,h as default};
