import{_ as s,c as n,o as a,a as l}from"./app.43496e99.js";const m=JSON.parse('{"title":"Commands 系统","description":"","frontmatter":{},"headers":[{"level":2,"title":"声明 Commands","slug":"声明-commands","link":"#声明-commands","children":[]},{"level":2,"title":"注册 Commands","slug":"注册-commands","link":"#注册-commands","children":[]}],"relativePath":"extend/commands.md","lastUpdated":1660026515000}'),o={name:"extend/commands.md"},p=l(`<h1 id="commands-系统" tabindex="-1">Commands 系统 <a class="header-anchor" href="#commands-系统" aria-hidden="true">#</a></h1><p>Commands 系统是 Unreal Editor 的一个重要组成部分，该系统将视图层命令（如复制粘贴、开始暂停、窗口切换等）进行封装，实现了命令全局管理、热键绑定、拖拽支持等特性，同时使得这些命令易于跨组件访问和复用。</p><p>Commands 系统主要涉及以下几个类：</p><ul><li><code>TCommands&lt;&gt;</code> ：若干条视图层命令的集合，负责命令的基本信息注册与生命周期维护。</li><li><code>FUICommandInfo</code> ：描述视图层命令的基本信息。</li><li><code>FUIAction</code> ：描述视图层命令的动作信息。</li><li><code>FUICommandList</code> ：记录视图层命令基本信息与动作信息间的绑定关系。</li></ul><p>此外，Commands 系统还涉及 <code>FUICommandDragDropOp</code> <code>FInputChord</code> 等与拖拽和热键相关的类。</p><p>在本节中，为了表述的简洁性，做出以下命名约定：</p><ul><li>将特定 <code>TCommands&lt;&gt;</code> 派生类称作 Commands 。</li><li>将特定 <code>FUICommandInfo</code> 实例称作 Command 。</li><li>将特定 <code>FUIAction</code> 实例称作 Action 。</li><li>将特定 <code>FUICommandList</code> 实例称作 CommandList 。</li></ul><p>下面演示如何向 Unreal Editor 添加自定义视图层命令。</p><h2 id="声明-commands" tabindex="-1">声明 Commands <a class="header-anchor" href="#声明-commands" aria-hidden="true">#</a></h2><p>声明一个 Commands 并实现构造函数。每个 Commands 可包含任意个 Command 。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FMyCommands</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">TCommands</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FMyCommands</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">FMyCommands</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">TCommands</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FMyCommands</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">TEXT</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyCommand</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#676E95;font-style:italic;">                                   // Name</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">NSLOCTEXT</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Contexts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyCommand</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My Command</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#676E95;font-style:italic;">    // Description</span></span>
<span class="line"><span style="color:#F07178;">    NAME_None</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">                                           // Parent Name</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">FMyStyle</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">GetStyleSetName</span><span style="color:#89DDFF;">()</span><span style="color:#676E95;font-style:italic;">                          // Style Set Name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">RegisterCommands</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Commands List</span></span>
<span class="line"><span style="color:#F07178;">  TSharedPtr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">FUICommandInfo</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> PluginAction</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  TSharedPtr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">FUICommandInfo</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> AnotherAction</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>至少还需为该 Commands 实现 <code>RegisterCommands()</code> 方法，用于注册 Command 。可在该方法中使用 <code>UI_COMMAND()</code> 宏声明 Command 的信息。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FMyCommands</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">RegisterCommands</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">UI_COMMAND</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    PluginAction</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">                         // Command</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">toolbar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">                            // Name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Execute toolbar action</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">             // Description</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">EUserInterfaceActionType</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Button</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">     // Command Type</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">FInputChord</span><span style="color:#89DDFF;">()</span><span style="color:#676E95;font-style:italic;">                         // Input Chord</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="注册-commands" tabindex="-1">注册 Commands <a class="header-anchor" href="#注册-commands" aria-hidden="true">#</a></h2><p>在使用 Command 之前，需要将其注册到 Unreal Editor 。注册操作分为两个部分：</p><ul><li>向 Unreal Editor 的全局绑定管理系统注册 Commands 。</li><li>为 Command 绑定 Action 。</li></ul><p>首先，在模块中创建一个 CommandList ，用于记录 Command 与 Action 的绑定关系：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FTestModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">IModuleInterface</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">StartupModule</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ShutdownModule</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  TSharedPtr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">FUICommandList</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> PluginCommands</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>然后在模块的 <code>StartupModule()</code> 钩子中注册 Command ：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FTestModule</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">StartupModule</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">FMyCommands</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  PluginCommands </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MakeShared</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FUICommandList</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">  PluginCommands</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">MapAction</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">FMyCommands</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">PluginAction</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">   // Command</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">FExecuteAction</span><span style="color:#89DDFF;">(),</span><span style="color:#676E95;font-style:italic;">                  // Delegate: () -&gt; void</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><code>Register()</code> 方法会调用上文实现的 <code>RegisterCommands()</code> 方法，注册 Command 。</li><li><code>MapAction()</code> 方法将 Command 与 Action 绑定。该方法有多种重载形式。</li></ul>`,21),e=[p];function t(c,r,F,y,i,D){return a(),n("div",null,e)}const C=s(o,[["render",t]]);export{m as __pageData,C as default};
