import{_ as e,c as a,o as t,a as i}from"./app.43496e99.js";const f=JSON.parse('{"title":"资产类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"关于资产类型","slug":"关于资产类型","link":"#关于资产类型","children":[]},{"level":2,"title":"资产类型的定义与实现","slug":"资产类型的定义与实现","link":"#资产类型的定义与实现","children":[]},{"level":2,"title":"本章介绍","slug":"本章介绍","link":"#本章介绍","children":[]}],"relativePath":"asset/intro.md","lastUpdated":1660026515000}'),l={name:"asset/intro.md"},r=i('<h1 id="资产类型" tabindex="-1">资产类型 <a class="header-anchor" href="#资产类型" aria-hidden="true">#</a></h1><h2 id="关于资产类型" tabindex="-1">关于资产类型 <a class="header-anchor" href="#关于资产类型" aria-hidden="true">#</a></h2><p>资产类型是 Unreal 中一个非常重要的概念。通过自定义资产类型，可以实现以下需求：</p><ul><li>优化开发流程和工程结构</li><li>自定义便于与中间件或其他外部软件通信的格式</li><li>优化游戏运行时资源加载和卸载</li></ul><p>本文暂不讨论资产的高级用法。</p><p>得益于 Unreal 较为优秀的接口设计，开发者可以自由地通过插件为引擎添加自定义资产类型。</p><h2 id="资产类型的定义与实现" tabindex="-1">资产类型的定义与实现 <a class="header-anchor" href="#资产类型的定义与实现" aria-hidden="true">#</a></h2><p>Unreal 资产类型实现一般涉及以下接口和类：</p><ul><li><code>UObject</code>：用于存储资产类型实际内容的容器</li><li><code>UFactory</code>：实现资产类型在编辑器中实例化的类</li><li><code>IAssetTypeActions</code>：描述资产类型在编辑器中名称、缩略图等各种属性的接口</li><li><code>FAssetEditorToolkit</code>: 资产编辑器的基类，继承该类可实现自定义的资产属性编辑器</li></ul><h2 id="本章介绍" tabindex="-1">本章介绍 <a class="header-anchor" href="#本章介绍" aria-hidden="true">#</a></h2><p>本章将从以上 4 个接口和类出发，介绍如何在 Unreal 中自定义一个简单的资产类型。</p>',11),d=[r];function n(o,s,c,h,_,p){return t(),a("div",null,d)}const m=e(l,[["render",n]]);export{f as __pageData,m as default};
